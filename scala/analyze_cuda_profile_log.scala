#!/bin/sh
exec scala $0 $@
!#

// written by Alexander Samoilov for analyzing log file generated by driver when CUDA_PROFILE=1
// prints statistics how much each kernel incomes to the total gputime, also reports max gputime obtained on biggest grid


import scala.io.Source
import scala.collection.mutable.HashMap
import scala.math

def demangle_cpp_name(mangled : String) : String = {
    import sys.process._
    Process(Seq("c++filt", "-n", mangled.trim)).!!.trim // remove last '\n'
}

def print_border(fill : Int) : Unit = println( "_" * fill )

val split_regexp = """.*method=\[(.*)\].*gputime=\[\s*(\d+\.\d+)\s*\].*cputime=\[\s*(\d+\.\d+)\s*\].*""".r
var kstat = HashMap[String, (Int, Double, Double, Double, Double)]()
val lines = Source.stdin.getLines.filter(line => "gputime=".r.findFirstIn(line).isDefined).toArray
var total_gputime = 0.0; var total_cputime = 0.0
lines.foreach{line =>
    val split_regexp(kernel_name, gputime, cputime) = line
    val gpu_etime = gputime.toDouble; val cpu_etime = cputime.toDouble
    total_gputime += gpu_etime; total_cputime += cpu_etime
    if (kstat.contains(kernel_name)) {
        val (ncalls, tot_gputime, max_gputime, tot_cputime, max_cputime) = kstat(kernel_name)
        kstat(kernel_name) = (ncalls + 1, tot_gputime + gpu_etime, math.max(max_gputime, gpu_etime),
                                          tot_cputime + cpu_etime, math.max(max_cputime, cpu_etime))
    } else {
        kstat(kernel_name) = (1, gpu_etime, gpu_etime, cpu_etime, cpu_etime)
    }
}

val kstat_sorted = kstat.toSeq.sortWith{ case ( (_, (_, ttime1, _, _, _)), (_, (_, ttime2, _, _, _)) ) => ttime1 > ttime2 }
val fillw = 160
print_border(fillw)
println("Total gpu time: %g total cpu time: %g" format(total_gputime, total_cputime))
print_border(fillw)
var no = 0; var perc_acc = 0.0
val kernel_name_wid = 45 // Scala as Java doesn't support the "*" format specifier
val kernel_name_fmt = "%-" + kernel_name_wid + "." + kernel_name_wid + "s"
println(("%-4s " + kernel_name_fmt + " %21s | %21s | %21s | %15s | %15s")
        .format("no: ", "kernel", "number of calls", "kernel tot gpu time", "kernel max gpu time",
                "percentage%", "cumul. percentage%"));
print_border(fillw)
for ((kname, (ncalls, ttime, mtime, cpu_ttime, _)) <- kstat_sorted) {
    val perc = 100.0 * (ttime / total_gputime);
    perc_acc += perc
    println(("%-4d " + kernel_name_fmt + " %21d | %21.2f | %21.2f | %14.4f%% | %17.4f%%").
            format(no, demangle_cpp_name(kname), ncalls, ttime, mtime, perc, perc_acc));
    no += 1
    print_border(fillw)
}

